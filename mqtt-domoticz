#!/usr/bin/python
#
# mqtt-domoticz by Theo Arends
#
# Provides MQTT Domoticz bridge service
#
# Execute: mqtt-domoticz &
#
# Needs paho.mqtt.client
#   - git clone http://git.eclipse.org/gitroot/paho/org.eclipse.paho.mqtt.python.git
#   - python setup.py install
# Needs python MySql support
#   - apt-get install python-mysqldb
#
# <sub_prefix>/<domoticz_name>|<domoticz_id + idx_offset>/LIGHT [0|Off|1|On|2|Toggle]
#   turn switch off(0), on(1) or toggle(2)
#   sido/Huis_light/LIGHT Off
# <sub_prefix>/<domoticz_name>|<domoticz_id + idx_offset>/DIMMER [0 .. 100]
#   dim light
#   sido/Huis_light/DIMMER 50
#
# **** Start of user configuration values

broker = "localhost"       # MQTT broker ip address or name
broker_port = 1883         # MQTT broker port

sub_prefix = "sido"        # Own subscribe topic
pub_prefix = "stat"        # Own publish topic or empty string for no publishing
idx_offset = 2000          # Domoticz device id offset

domoticz_server = "sidnas2"

# **** End of user configuration values

M_VERSION = 1.1

M_INFO = 0                 # Print messages: 0 - none, 1 - Startup, 2 - Serial, 3 - All

import paho.mqtt.client as mqtt
import urllib2
import json
import time
import datetime

def my_info(type, message):
  if M_INFO > type:
    print(message)

def domoticzrequest(cmnd):
  url = "http://"+domoticz_server+":8080/json.htm?type="+cmnd
  request = urllib2.Request(url)
  response = urllib2.urlopen(request)
  return response.read()

def VerifyDomoticzDevice(name):
  idx = 0
  device = ""
  subtype = ""
  if len(name) < 5:
    try:
      if int(name) > idx_offset:
        idx = str(int(name) - idx_offset)
    except:
      pass
  else:
    device = name.replace("_"," ")
  try:
    cmnd = 'command&param=getlightswitches'
    json_object = json.loads(domoticzrequest(cmnd))
    if json_object["status"] == "OK":
      for i, v in enumerate(json_object["result"]):
        if len(name) > 4:
          if (json_object["result"][i]["Name"] == device):
            idx = json_object["result"][i]["idx"]
            subtype = json_object["result"][i]["SubType"]
            break
        else:
          if (json_object["result"][i]["idx"] == idx):
            device = json_object["result"][i]["Name"]
            subtype = json_object["result"][i]["SubType"]
            break
  except:
    idx = 0
    pass
  return (idx, device, subtype)

def GetDomoticzDevice(idx):
  status = ""
  try:
    cmnd = 'devices&rid='+str(idx)
    json_object = json.loads(domoticzrequest(cmnd))
    if json_object["status"] == "OK":
      status = json_object["result"][0]["Status"]  # "On", "Off", "Set Level: 46 %"
  except:
    pass
  return status

def SetDomoticzDevice(idx, state, level):
  try:
    cmnd = 'command&param=switchlight&idx='+str(idx)+'&switchcmd='+state+'&level='+str(level)
    data = domoticzrequest(cmnd)
  except:
    pass

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
  my_info(0, "\nMQTT-Domoticz service connected with result code "+str(rc))

# Subscribing in on_connect() means that if we lose the connection and
# reconnect then subscriptions will be renewed.
  client.subscribe([(sub_prefix+"/#",0)])

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
  my_info(2, "MQTT subscribed |"+msg.topic+"|"+str(msg.qos)+"|"+str(msg.payload)+"|")
  part = msg.topic.split("/",3)  # sido/Werkkamer_led/LIGHT

#  print(len(part), part[0], part[1], part[2])

  if len(part) == 3:
    idx = 1
    if len(part[1]) < 5:
      try:
        tidx = int(part[1])
        if tidx < idx_offset and tidx > (idx_offset +999):
          idx = 0
      except:
        pass
    if idx == 1:
      idx, mydevice, subtype = VerifyDomoticzDevice(part[1])

    if idx > 0:
      payload = msg.payload.upper()
      mytype = part[2].upper()

      if mytype == "LIGHT":
        if payload == "0" or payload == "OFF":
          payload = "Off"
        if payload == "1" or payload == "ON":
          payload = "On"
        if payload == "2" or payload == "TOGGLE":
          if GetDomoticzDevice(idx) == "On":
            payload = "Off"
          else:
            payload = "On"
        if payload == "On" or payload == "Off":
          SetDomoticzDevice(idx, payload, 0)
      elif mytype == "DIMMER":
        try:
          ipayload = int(payload)
          if ipayload >= 0 and ipayload <= 100:
#            if subtype == "AC":
            ipayload = ipayload / 6
            if ipayload < 10:
              ipayload = ipayload +1
            SetDomoticzDevice(idx, "Set+Level", ipayload)
        except:
          pass
      else:
        mytype = ""

#      if len(mytype) > 0 and len(pub_prefix) > 0:
#        mydevice = str(idx_offset + int(idx))
#        mytopic = pub_prefix + "/" + mydevice + "/" + mytype
#        my_info(2, "MQTT  published |"+mytopic+"|"+payload+"|")
#        client.publish(mytopic, payload)

my_info(0, "MQTT Domoticz bridge service.")

mainloop = 1
while mainloop == 1:
  client = mqtt.Client()
  client.on_connect = on_connect
  client.on_message = on_message

  rc = 1
  while rc == 1:
    try:
      client.connect(broker, broker_port)
      rc = 0
    except:
      my_info(0, "Warning: No broker found. Retry in one minute.")
      time.sleep(60)
      pass

  if len(pub_prefix) > 0:
#    client.publish(pub_prefix+"/"+str(idx_offset)+"/MESSAGE", "Connection with broker established.")
    client.publish(pub_prefix+"/MQTT-Domoticz/MESSAGE", "Connection with broker established.")

  while rc == 0:
    try:
      rc = client.loop()
    except:
      rc = 1
      pass

  print("Warning: Connection error - Restarting.")

  if M_INFO > 0:
    mainloop = 0
